@use 'variables' as v;
@use 'sass:color';
@use 'sass:map';
@use 'sass:math';

// Layout Mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin tablet-down {
  @media (max-width: v.$breakpoint-lg) {
    @content;
  }
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-start {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

@mixin responsive-grid($min-width, $gap: v.$spacing-md) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: $gap;
}

// Typography Mixins
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Line Clamp Mixin
@mixin line-clamp($lines) {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Component Mixins
@mixin card-base {
  background: v.$white;
  border-radius: v.$border-radius;
  box-shadow: v.$shadow-sm;
  transition: box-shadow v.$transition-normal;
  padding: v.$spacing-md;
  
  &:hover {
    box-shadow: v.$shadow-md;
  }
}

@mixin status-badge($color, $bg-color) {
  display: inline-flex;
  align-items: center;
  padding: v.$spacing-xs v.$spacing-sm;
  background-color: $bg-color;
  color: $color;
  border-radius: v.$border-radius-lg;
  font-size: v.$font-size-sm;
  font-weight: v.$font-weight-medium;
  line-height: 1;
}

@mixin form-control {
  width: 100%;
  padding: v.$spacing-sm;
  border: 1px solid v.$border;
  border-radius: v.$border-radius;
  font-family: v.$font-family-base;
  font-size: v.$font-size-md;
  line-height: 1.5;
  color: v.$text-dark;
  transition: border-color v.$transition-fast, box-shadow v.$transition-fast;

  &:focus {
    outline: none;
    border-color: v.$primary;
    box-shadow: 0 0 0 2px rgba(v.$primary, 0.2);
  }

  &:disabled {
    background-color: v.$color-gray-100;
    cursor: not-allowed;
  }

  &::placeholder {
    color: v.$text-light;
  }
}

// Animation Mixins
@mixin fade-in($duration: 0.3s) {
  animation: fadeIn $duration ease-in-out;

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
}

@mixin slide-in($direction: 'left', $duration: 0.3s, $delay: 0s) {
  $transform-start: '';
  $transform-end: '';
  
  @if $direction == 'left' {
    $transform-start: translateX(-100%);
    $transform-end: translateX(0);
  } @else if $direction == 'right' {
    $transform-start: translateX(100%);
    $transform-end: translateX(0);
  } @else if $direction == 'up' {
    $transform-start: translateY(100%);
    $transform-end: translateY(0);
  } @else if $direction == 'down' {
    $transform-start: translateY(-100%);
    $transform-end: translateY(0);
  }
  
  animation: slide-in-#{$direction} $duration ease-in-out $delay;
  
  @keyframes slide-in-#{$direction} {
    from {
      opacity: 0;
      transform: $transform-start;
    }
    to {
      opacity: 1;
      transform: $transform-end;
    }
  }
}

// Loading States
@mixin skeleton-loader {
  background: linear-gradient(
    90deg,
    rgba(v.$color-gray-200, 0.8) 25%,
    rgba(v.$color-gray-300, 0.8) 37%,
    rgba(v.$color-gray-200, 0.8) 63%
  );
  background-size: 400% 100%;
  animation: skeleton-loading 1.4s ease infinite;

  @keyframes skeleton-loading {
    0% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0 50%;
    }
  }
}

// Media Query Mixins
@mixin mobile {
  @media (max-width: v.$breakpoint-sm) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: v.$breakpoint-sm) and (max-width: v.$breakpoint-lg) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: v.$breakpoint-lg) {
    @content;
  }
}

// Component State Mixins
@mixin hover-focus {
  &:hover,
  &:focus-visible {
    @content;
  }
}

@mixin disabled {
  &:disabled,
  &.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
    @content;
  }
}

// Custom Scrollbar
@mixin custom-scrollbar($width: 8px, $track-color: v.$border-light, $thumb-color: v.$border) {
  &::-webkit-scrollbar {
    width: $width;
  }
  
  &::-webkit-scrollbar-track {
    background: $track-color;
  }
  
  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: $width / 2;
    
    &:hover {
      background: darken($thumb-color, 10%);
    }
  }
}

// Helper Mixins
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &::before {
    content: '';
    display: block;
    padding-top: math.div($height, $width) * 100%;
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

@mixin hide-scrollbar {
  -ms-overflow-style: none;
  scrollbar-width: none;
  
  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin focus-outline {
  outline: 2px solid v.$primary;
  outline-offset: 2px;
}

// Interactive Element Mixins
@mixin clickable {
  cursor: pointer;
  user-select: none;
  transition: all v.$transition-fast;
  
  &:focus-visible {
    @include focus-outline;
  }
}

@mixin button-base {
  @include clickable;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: v.$spacing-sm v.$spacing-md;
  border: none;
  border-radius: v.$border-radius;
  font-weight: v.$font-weight-medium;
  text-align: center;
  text-decoration: none;
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-variant($bg-color, $text-color) {
  background-color: $bg-color;
  color:            $text-color;
  border:           none;
  cursor:           pointer;
  transition:       background-color v.$transition-fast;

  &:hover {
    background-color: color.scale($bg-color, $lightness: -10%);
  }
}

// Button Outline (ghost)
@mixin button-outline($border-color, $text-color: $border-color) {
  background-color: transparent;
  color:            $text-color;
  border:           1px solid $border-color;
  cursor:           pointer;
  transition:       background-color v.$transition-fast;

  &:hover {
    background-color: color.scale($border-color, $lightness: 90%);
  }
}